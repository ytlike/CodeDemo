/*-----------------------------------------------------------------------------
安检模块休息、下班模块


-----------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------
处理流程 每次对一个命令行做处理
1、获取指令：键盘或者文件
2、指令处理：生成乘客信息，随机产生服务时间，Passenger存储，唯一的dataID
3、进入队列缓冲区
4、进入窗口服务区
5、安检完毕离开安检口

-----------------------------------------------------------------------------*/

/*-----------------------------------------------------------------------------
NO.6 时间显示模块
1、时间显示模块
	ShowTime.h
	ShowTime.c
2、功能
	2.1 int PrintTimeThree(ShowTime * systime);

3、待整合
-----------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------
NO.5 配置信息模块
1、配置信息模块
	Config.h
	Config.c
2、功能
	

3、待整合
-----------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------
NO.4 乘客人员信息模块
1、安检口模块
	PassengerInfo.h
	PassengerInfo.c
2、功能
	2.1	int dataID; 存储排队号码
	2.2 int servicedTimes; 服务处理时间

3、待整合
-----------------------------------------------------------------------------*/

/*-----------------------------------------------------------------------------
start at 20170530 18：00
NO.3 安检口模块
1、安检口模块
	GateSafetyCheck.h
	GateSafetyCheck.c
2、功能
	2.1、队列最多6人
	2.2、接口
		bool isNeedPassenger;
		bool isGoOffWork;

3、待整合
end at 20170530 20:00
-----------------------------------------------------------------------------*/

/*-----------------------------------------------------------------------------
start at 20170530 15：33
1、安检口模块 分析：
	八个安检口一样，可以先实现一个安检口
2、安检口客户处理要求功能：
	2.1、排队队列 6 个人
	2.2、每次处理1人所花费时间 MinSec ~ MaxSec
	2.3、休息时间 MinRestSec ~ MaxRestSec
	2.4、MinSec MaxSec MinRestSec MaxRestSec 系统配置文件给定
	2.5、具体时间由随机数产生
3、安检口暂停要求功能
	3.1、安检口正在服务时显示剩余服务时间
	3.2、关闭的安检口显示"关闭"
4、安检口休息
5、下班
6、从缓冲区进来的人员安排
7、配置文件
-----------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------
start at 20170529 20:00
NO.2 排队缓冲区 模块
1、人员排队缓冲区
	SequalQueue.h
	SequalQueue.c
2、功能
	2.1 队列初始化
	2.2 进队列
	2.3 出队列
	2.4 获取队列队首元素信息
end at 20170530 1:00
-----------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------
NO.0 统一管理 模块
1、统一初始化
2、各个模块间的数据传递
3、各个模块间的信号传递
4、待补充。。。

5、完成顺序 其他功能模块全部完成之后，最后整合
-----------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------
start at 20170530 8:00
NO.1 输入模块
1、三种输入其中两种
	1.1、文件输入
		FileInput.h
		FileInput.c
	2.1、键盘输入
		KeyboardInput.h
		KeyboardInput.c
	3.1、待实现
2、功能
	1.1、文件读取
	1.2、返回统一的命令行信息

	2.1、键盘读取
	2.2、返回统一的命令行信息
3、统一标准
	输入传出标准：
	3.1、每次一个字符串：T=<请求发生时间>,EVENT=<事件|事件><'\0'>
	3.2、无空格

4、待实现
	4.1、输入接口 待实现
	4.2、读取控制
5、其他

end at 20170530 15：15
-----------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------
start at 20170529 23:35
一 机场安检大厅配置
1、机场安检大厅设有一个排队缓冲区以及8个安检口（安检口序号为1~8）。
等待安检的乘客首先需要进入 “排队缓冲区”进行等待，当有空闲的安检口时队首的
乘客从排队缓冲区进入“安检口通道”，等待安检。每个安检口最多排6位乘客，
安检人员按顺序为乘客提供安检服务，每次检查1个乘客。
2、“排队缓冲区”初始状态下是直线型。一个直队最多能容纳MaxCustSingleLine位乘客。
当等待安检的乘客人流量超过MaxCustSingleLine时，
系统自动调整排队缓冲区为蛇形缓冲区，
且蛇形缓冲区的形态会根据排队乘客数量进行动态调整。
蛇形缓冲区最多由MaxLines个直队构成，
如果排队乘客数超过了排队缓冲区最大容量，则剩下的乘客不允许进入排队缓冲区。
3、初始状态下，先开放4个安检口，后续可以根据乘客流量开放/关闭部分安检口
（属于可选的高级功能，功能描述见后面）。
4、安检口可以申请暂停服务，休息一段时间。系统会根据一定策略来判断安检口能否休息
（休息策略见第二部分描述）。
5、当下班时间到或收到“下班”指令后，安检口不再接收新来的乘客；
等原有排队的乘客都被处理完毕，才允许正式下班，关闭安检大厅，退出程序。

三 输入输出
（一）三种输入方式
a、文件输入
文件名为input.txt，文件格式为：
T=<请求发生时间>,EVENT=<事件|事件><\n>
请求发生时间：按程序运行的系统时钟时间，单位秒
事件：
一个乘客申请进入“排队缓冲区”（G）；
安检口申请暂停请求（RX，其中X表示安检口号，取值为1~8）；
安检口回复安检请求（CX，其中X表示安检口号，取值为1~8）；
下班申请（Q）；
事件之间以|分割
T=8，EVENT=G|G|G|
T=10，EVENT=G|G|
T=15，EVENT=R1
T=50，EVENT=G|G|G|G|G|R3
T=60，EVENT=C1
T=80，EVENT=G|G|G|
T=150，EVENT=Q

b、从键盘输入
我们可以设定按键如下：
‘G’表示一个乘客申请进入“排队缓冲区”。
‘RX’表示X号安检口请求暂停，X取值为1~8。
‘CX’表示X号安检口请求恢复安检，X取值为1~8。
‘Q’表示下班。

c、图形界面输入
窗口中设置乘客按钮，鼠标点击表示乘客申请进入“排队缓冲区”。
当“排队缓冲区”未达到容量上限时，准许乘客进入。
窗口中专门设置安检口申请暂停和恢复服务按钮，可用鼠标点击。
窗口中显示下班的指令钮，鼠标点击表示发出下班指令。
（二）输出方式
1、文件输出
输出信息到以下两个文件
output.txt 当安检口、安检口队列和排队缓冲区状态有变化时进行记录
outputDetail.txt 周期性记录安检口、安检口队列和排队缓冲区的状态

以上两个文件的格式如下：
T=<当前时间（3位）>
OFFDUTY=Y/N（是否下班）
WIN1:State=状态(11位),
	 ServLen=已服务时长(3位)/计划服务时长(3位),
	 RestLen=已休息时长(3位)/计划休息时长(3位),
	 WinListState=状态（11位），
	 WinListCustCount=安检口队列人数<\n>
WIN2:同上
...
WIN8:同上
ListLines=排队缓冲区队列数（当是蛇形队列时，该队列数必大于1）<\n>
ListCustCount=排队缓冲区总乘客数<\n>

当有乘客进入排队缓冲区时，输出“乘客进入排队缓冲区”<\n>
当乘客想进入排队缓冲区但遭到拒绝时，输出“排队缓冲区已满”<\n>
当下班指令到达，输出“接收到下班指令”<\n>

说明：1.如果当前安检口在服务中，则RestLen=已休息时长(3位)/计划休息时长(3位)值为RestLen=/；
		如果当前安检口在休息中，则ServLen=已服务时长(3位)/计划服务时长(3位)值为ServLen=0/0
      2.WinListState可能的状态有
	   “CUSTADDIN”(新乘客加入），
	   “NOTCHANGED”（无变化）、
	   “CUSTLEAVE”（乘客离开队列进入安检口）

2、命令行输出
当安检口、安检队列和排队缓冲区状态有变化时进行输出，
输出信息同文件输出，输出格式自己设计，
可以用纯数字输出，也可以用接近图形化方式输出。力求直观。

3、动画输出
在窗口动态显示安检口、安检口队列和排队缓冲区状态，
以及是否下班。当安检口在服务中时，显示同时剩余服务时间；
当在暂停状态时，显示同时剩余休息时间。

-----------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------
start at 20170529 21:00
机场安检排队系统 模块化开发
1、排队缓冲区管理
2、分配乘客到安检口
3、安检
4、安检休息管理
5、下班
6、配置文件维护
7、安检口开/关，动态管理
-----------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------
两次迭代
版本一：非动画IO版本
目标1：输入从文件读取，输出到文件和命令。
实现功能：排队缓冲区管理、分配乘客到安检口、安检、安检口休息管理、下班
目标2：输入从键盘读取，输出到文件和命令行，形成完整的第一版本

版本二：在版本一基础上，新增功能：配置文件维护、图形界面输入，动画输出。
形成完整的第二版本。要包括全部的功能和三种输入输出方式：
1、文件输入，文件和命令行输出；
2、键盘输入，文件和命令行输出；
3、图形界面输入，动画输出。

用户在启动程序是，可以选择采用上述三种输入输出方式的任意一种
-----------------------------------------------------------------------------*/
/******************************************************************************
	File name: 机场安检排队管理系统
	Used tool: Visual Studio 2015
		<20170529 23:15><Changed><ytlike>
******************************************************************************/